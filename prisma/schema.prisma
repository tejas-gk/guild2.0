// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  location        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[]  @db.ObjectId
  joinedIds       String[]  @db.ObjectId
  hasNotification Boolean?

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  guildIds String[] @db.ObjectId

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  Message       Message[]
  guilds        Guild[]

  UserSubscription UserSubscription[]
  Vote             Vote[]
}

enum Votes {
  UP
  DOWN
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  vote      Votes
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  body String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likedIds  String[] @db.ObjectId
  image     String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  guild    Guild?    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  guildId String? @db.ObjectId
  Vote    Vote[]
}

model Guild {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String?
  coverImage   String?
  profileImage String?
  bio          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post[]
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    @db.ObjectId
  postId    String    @db.ObjectId
  parentId  String?   @db.ObjectId
  replyTo   Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("Replies")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeCustomerId         String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId     String?   @unique @map("stripe_subscription_id")
  stripePriceId            String?   @unique @map("stripe_price_id")
  stripeCurrentPeriodStart DateTime? @map("stripe_current_period_start")

  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])
}
